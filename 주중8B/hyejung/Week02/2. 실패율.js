/*
[문제]
슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.

이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 오렐리를 위해 실패율을 구하는 코드를 완성하라.

실패율은 다음과 같이 정의한다.
스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수

전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

*제한사항*
스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
stages의 길이는 1 이상 200,000 이하이다.
stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.
*/
// [다른 사람 풀이 참고]
function solution(N, stages) {
  let result = [];
  // 1부터 스테이지의 갯수만큼 반복을 돈다.
  for (let i = 1; i <= N; i++) {
    // 현재 스테이지를 넘어간 사람의 인원 수
    let reach = stages.filter(x => x >= i).length;
    // 현재 인원 수
    let curr = stages.filter(x => x === i).length;
    // 현재 인덱스가 스테이지 번호이므로, 스테이지 번호와 실패율을 구해 result 배열에 추가한다.
    result.push([i, curr / reach]);
  }
  // 스테이지 번호와 각 스테이지의 실패율이 배열에 담겨있으므로 실패율을 기준으로 내림차순 정렬한 뒤에 인덱스 번호(스테이지)만 리턴한다.
  result.sort((a, b) => b[1] - a[1]);
  return result.map(x => x[0]);
}

// [미완성 풀이]
// 1. 각 스테이지별로 클리어하지 못한 유저가 얼만큼인지 표시
// 2. 스테이지별 유저 수 / 전체 유저 - (현재 스테이지 유저 + 이전 스테이지 유저) 로 실패율을 계산한다. 이를 객체로, 현재 인덱스 - 실패율 로 저장한다.
// 3. sort 로 실패율을 기준으로 정렬한다.
// 4. 인덱스만 추출하여 배열화한 뒤 출력한다.

function mySolution(n, stages) {
  let checkArr = new Array(n + 2).fill(0);
  for (let s of stages) {
    checkArr[s] += 1;
  }

  let stageRatios = {};

  // 막힌 부분 : 실패율을 구하는 부분이 아직도 잘 이해가 안된다.
  // 레퍼런스를 보고... stages 에서 filter 로 현재 스테이지에 있거나 더 큰 스테이지에 있는 유저의 경우만 필터링해서 그 길이로 분모를 구함.
  // 도달한 플에이어의 수 이기 때문에 현재 스테이지까지 포함해야함..
  for (let i = 1; i <= n; i++) {
    let reach = stages.filter(x => x >= i).length;
    let curr = checkArr[i];
    stageRatios[i] = curr / reach;
  }

  // 어차피 배열을 만들어야 value 값으로 정렬할 수 있기 때문에, 처음부터 배열에 push 하는 것이 낫다.
  let sortable = [];
  for (let [key, val] of Object.entries(stageRatios))
    sortable.push([+key, val]);

  return sortable.sort((a, b) => b[1] - a[1]).map(v => v[0]);
}

// 전체 스테이지의 수
const n = 5;
// 게임 이용자가 현재 멈춘 스테이지
// 여기서 n + 1은 마지막 스테이지까지 클리어 한 사용자를 나타냄
const stages = [2, 1, 2, 6, 2, 4, 3, 3];

// 출력 : 실패율이 높은 스테이지부터 내림차순으로 정렬
// 만약 실패율이 같다면 작은 번호의 스테이지가 먼저 오도록 정렬하자.
console.log(mySolution(n, stages));
