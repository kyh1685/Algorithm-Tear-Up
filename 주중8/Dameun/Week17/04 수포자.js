// 1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
// 2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
// 3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...

//1번 > 1부터 5까지 순회  > 12345배열을 돌면서 채점
//2번 > 2번 하나 뒤에 1,3,4,5를 돈다   [2, 1, 2, 3, 2, 4, 2, 5]
//3번 > 3, 3, 1, 1, 2, 2, 4, 4, 5, 5 를 돈다

function solution(answers) {
  const first = [1, 2, 3, 4, 5]; // 5
  const second = [2, 1, 2, 3, 2, 4, 2, 5]; // 8
  const third = [3, 3, 1, 1, 2, 2, 4, 4, 5, 5]; // 10
  const point = [0, 0, 0];

  for (let i = 0; i <= answers.length; i++) {
    if (answers[i] === first[i % 5]) point[0]++;
    if (answers[i] === second[i % 8]) point[1]++;
    if (answers[i] === third[i % 10]) point[2]++;
  }
  let maxNum = Math.max(...point);
  let result = [];
  point.map((el, idx) => {
    if (el === maxNum) result.push(idx + 1);
  });
  return result;
}

solution([1, 2, 3, 4, 5]);

//15분
//4점
// 테스트 1 〉	통과 (0.07ms, 33.4MB)
// 테스트 2 〉	통과 (0.11ms, 33.4MB)
// 테스트 3 〉	통과 (0.07ms, 33.4MB)
// 테스트 4 〉	통과 (0.07ms, 33.4MB)
// 테스트 5 〉	통과 (0.17ms, 33.4MB)
// 테스트 6 〉	통과 (0.17ms, 33.5MB)
// 테스트 7 〉	통과 (0.64ms, 33.4MB)
// 테스트 8 〉	통과 (0.34ms, 33.5MB)
// 테스트 9 〉	통과 (4.87ms, 36.9MB)
// 테스트 10 〉	통과 (0.56ms, 33.5MB)
// 테스트 11 〉	통과 (4.45ms, 36.8MB)
// 테스트 12 〉	통과 (3.17ms, 36.7MB)
// 테스트 13 〉	통과 (0.23ms, 33.4MB)
// 테스트 14 〉	통과 (3.10ms, 36.8MB)
